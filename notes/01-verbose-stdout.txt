func streamDownload(pod, container, ns, remote, local string) error {
	remotePath := filepath.Join(mountPath, filepath.Clean(remote))
	local = filepath.Clean(local)

	// Prepare kubectl exec
	cmd := exec.Command("kubectl", "exec", "-i", pod, "-c", container, "-n", ns,
		"--", "tar", "czf", "-", "-C", remotePath, ".")
	stdout, err := cmd.StdoutPipe()
	if err != nil {
		return err
	}

	if err := cmd.Start(); err != nil {
		return err
	}

	// Wrap in gzip
	gr, err := gzip.NewReader(stdout)
	if err != nil {
		return err
	}
	defer gr.Close()

	tr := tar.NewReader(gr)

	for {
		header, err := tr.Next()
		if err == io.EOF {
			break
		}
		if err != nil {
			return err
		}

		target := filepath.Join(local, header.Name)
		fmt.Println("Extracting:", target)

		switch header.Typeflag {
		case tar.TypeDir:
			err = os.MkdirAll(target, os.FileMode(header.Mode))
		case tar.TypeReg:
			err = os.MkdirAll(filepath.Dir(target), 0o755)
			if err == nil {
				outFile, err := os.Create(target)
				if err != nil {
					return err
				}
				if _, err := io.Copy(outFile, tr); err != nil {
					outFile.Close()
					return err
				}
				outFile.Close()
				err = os.Chmod(target, os.FileMode(header.Mode))
			}
		}
		if err != nil {
			return err
		}
	}

	return cmd.Wait()
}