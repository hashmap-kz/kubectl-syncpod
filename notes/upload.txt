func streamUpload0(pod, container, ns, local, remote, mountPath string) error {
	cmd := exec.Command("kubectl", "exec", "-i", pod, "-c", container, "-n", ns,
		"--", "tar", "xzf", "-", "-C", filepath.Join(mountPath, remote))
	tarCmd := exec.Command("tar", "czf", "-", "-C", local, ".")
	pipe, err := tarCmd.StdoutPipe()
	if err != nil {
		return err
	}
	cmd.Stdin = pipe

	if err := tarCmd.Start(); err != nil {
		return err
	}
	if err := cmd.Run(); err != nil {
		return err
	}
	return tarCmd.Wait()
}

func streamUpload1(pod, container, ns, local, remote, mountPath string) error {
	remotePath := filepath.ToSlash(filepath.Join(mountPath, filepath.Clean(remote)))
	local = filepath.ToSlash(filepath.Clean(local))

	// Debug: show commands being run
	fmt.Println("Running:", "tar czf - -C", local, ".", "|", "kubectl exec", pod, "-- tar xzf - -C", remotePath)

	// Upload local dir to remote PVC path via helper pod
	cmd := exec.Command("kubectl", "exec", "-i", pod, "-c", container, "-n", ns,
		"--", "tar", "xzf", "-", "-C", remotePath)

	tarCmd := exec.Command("tar", "czf", "-", "-C", local, ".")

	// Pipe tar output to kubectl stdin
	pipe, err := tarCmd.StdoutPipe()
	if err != nil {
		return fmt.Errorf("create stdout pipe: %w", err)
	}
	cmd.Stdin = pipe

	// Stream stderr for both processes
	cmd.Stderr = os.Stderr
	tarCmd.Stderr = os.Stderr

	if err := tarCmd.Start(); err != nil {
		return fmt.Errorf("start local tar: %w", err)
	}
	if err := cmd.Start(); err != nil {
		return fmt.Errorf("start kubectl exec: %w", err)
	}

	if err := tarCmd.Wait(); err != nil {
		return fmt.Errorf("local tar failed: %w", err)
	}
	if err := cmd.Wait(); err != nil {
		return fmt.Errorf("kubectl exec failed: %w", err)
	}

	return nil
}
